\m4_TLV_version 1d: tl-x.org
\SV
   // This code can be found in: https://github.com/stevehoover/LF-Building-a-RISC-V-CPU-Core/risc-v_shell.tlv
   
   m4_include_lib(['https://raw.githubusercontent.com/stevehoover/warp-v_includes/1d1023ccf8e7b0a8cf8e8fc4f0a823ebb61008e3/risc-v_defs.tlv'])
   m4_include_lib(['https://raw.githubusercontent.com/stevehoover/LF-Building-a-RISC-V-CPU-Core/main/lib/risc-v_shell_lib.tlv'])



   m4_test_prog()



\SV
   m4_makerchip_module   // (Expanded in Nav-TLV pane.)
   /* verilator lint_on WIDTH */
\TLV
   
   $reset = *reset;
   
   //PC
   $pc[31:0]      = >>1$next_pc;    
   
   $next_pc[31:0] = $reset ? 32'b0000 :           //reset PC
                    $taken_branch ? $br_tgt_pc :  //PC changed to branch address if branch is taken
                    $is_jal ? $br_tgt_pc:
                    $is_jalr ? $jalr_tgt_pc:
                    $pc + 32'd4;                  //default case : next instruction is fetched
   
   //IMEM
   `READONLY_MEM($pc, $$instr[31:0]);
   
   //DECODE LOGIC/ INSTR TYPE
   
   $is_r_instr = $instr[6:2] == 5'b01011 || 
                 $instr[6:2] ==? 5'b011x0 || 
                 $instr[6:2] ==? 5'b10100 ;
                 
   $is_i_instr = $instr[6:2] ==? 5'b0000x || 
                 $instr[6:2] ==? 5'b001x0 ||
                 $instr[6:2] == 5'b11001 ;
                 
   $is_s_instr = $instr[6:2] ==? 5'b0100x;
   $is_b_instr = $instr[6:2] == 5'b11000;
   $is_u_instr = $instr[6:2] ==? 5'b0x101;
   $is_j_instr = $instr[6:2] ==? 5'b11011;
     
   //EXTRACT NON-IMMEDIATE TYPE FIELDS FROM INSTRUCTIONS
   
   $funct7[6:0] = $instr[31:25];
   $funct3[2:0] = $instr[14:12];
   $rs1[4:0]    = $instr[19:15];
   $rs2[4:0]    = $instr[24:20];
   $rd[4:0]     = $instr[11:7];
   $opcode[6:0] = $instr[6:0];
   
   `BOGUS_USE($rd $rs1 $funct7 $funct3 $imm_valid $opcode $rs2);
   
   //CHECKNG VALIDITY OF FIELDS
   
   $funct7_valid  =  $is_r_instr;
   $funct3_valid  =  $is_r_instr || $is_i_instr || $is_s_instr || $is_b_instr;
   $rd_valid      =  $is_r_instr || $is_u_instr || $is_i_instr || $is_j_instr;
   $rs1_valid     =  $is_r_instr || $is_i_instr || $is_b_instr || $is_s_instr;
   $rs2_valid     =  $is_r_instr || $is_s_instr || $is_b_instr;
   $imm_valid     =  $is_i_instr || $is_s_instr || $is_b_instr || $is_u_instr|| $is_j_instr;
   
   `BOGUS_USE($rd_valid $rs1_valid $imm_valid $rs2_valid $funct7_valid $funct3_valid);
   
   //EXTRACTING IMMEDIATE VALUES
   
   $imm[31:0] = $is_i_instr ? {{21{$instr[31]}}, $instr[30:20]} :                                              //I type
                $is_s_instr ? {{21{$instr[31]}}, $instr[30:25], $instr[11:7]} :                                //S type
                $is_b_instr ? {{20{$instr[31]}}, $instr[7], $instr[30:25], $instr[11:8],1'b0} :                //B type
                $is_u_instr ? {$instr[31:12],  12'b0} :                                        //U type
                $is_j_instr ? {{12{$instr[20]}}, $instr[19:12], $instr[20], $instr[30:21], 1'b0} :             //J type
                32'b0;                                                                                         // default is 0
   
   `BOGUS_USE($imm);
   
   //Determine functionality of instruction from OPCODE+func7[5]+func3 fields
   //dec_bits is concatenation of the relevant fields 
   
   $dec_bits[10:0] = {$funct7[5],$funct3,$opcode};
   
   //Instructions that use only opcode
   
   $is_lui = $opcode == 7'b0110111;
   $is_auipc = $opcode == 7'b0010111;
   $is_jal = $opcode == 7'b1101111;
   $is_load = $opcode == 7'b0000011;

   //Instructions that dont use func7[5]
   $is_jalr  =  $dec_bits ==? 11'bx_000_1100111;
   $is_beq  =  $dec_bits ==? 11'bx_000_1100011;
   $is_bne  =  $dec_bits ==? 11'bx_001_1100011;
   $is_blt  =  $dec_bits ==? 11'bx_100_1100011;
   $is_bge  =  $dec_bits ==? 11'bx_101_1100011;
   $is_bltu =  $dec_bits ==? 11'bx_110_1100011;
   $is_bgeu =  $dec_bits ==? 11'bx_111_1100011;
   $is_addi =  $dec_bits ==? 11'bx_000_0010011;
   $is_slti =  $dec_bits ==? 11'bx_010_0010011;
   $is_sltiu =  $dec_bits ==? 11'bx_011_1100011;
   $is_xori =  $dec_bits ==? 11'bx_100_0010011;
   $is_ori =  $dec_bits ==? 11'bx_110_0010011;
   $is_andi =  $dec_bits ==? 11'bx_111_0010011;
   
   //Instructions that use func7[5]
   $is_slli = $dec_bits == 11'b0_001_0010011;
   $is_srli = $dec_bits == 11'b0_101_0010011;
   $is_srai = $dec_bits == 11'b1_101_0010011;
   $is_add =  $dec_bits == 11'b0_000_0110011;
   $is_sub = $dec_bits == 11'b0_000_0010011;
   $is_sll = $dec_bits == 11'b0_001_0010011;
   $is_slt = $dec_bits == 11'b0_010_0010011;
   $is_sltu = $dec_bits == 11'b0_011_0010011;
   $is_xor = $dec_bits == 11'b0_100_0010011;
   $is_srl = $dec_bits == 11'b0_101_0010011;
   $is_sra = $dec_bits == 11'b1_011_0010011;
   $is_or = $dec_bits == 11'b0_110_0010011;
   $is_and = $dec_bits == 11'b0_111_0010011;
   
   `BOGUS_USE($is_add $is_beq $is_bne $is_blt $is_bge $is_bltu $is_bgeu $is_addi);
   
   
   //Implement Register File
   
   $rd1_index[4:0]   = $rs1; //read port1 address 
   $rd2_index[4:0]   = $rs2; //read port2 address 
   $rd1_en           = $rs1_valid;   //read port 1 enable
   $rd2_en           = $rs2_valid;   //read port 2 enable
   $src1_value[31:0] = $rd1_data; //read port 1 data
   $src2_value[31:0] = $rd2_data; //read port 2 data
   $wr_en            = $rd_valid; //write port enable
   $wr_index[4:0]    = $rd;//write port address
   
   
   `BOGUS_USE($src1_value $src2_value)
   
   //Implement ADDI and ADD
   
   $sltu_result[31:0] = {31'b0,$src1_value < $src2_value} ;
   $sltiu_result[31:0] = {31'b0,$src1_value < $imm} ;
   
   $result[31:0] = $is_andi ? $src1_value & $imm :
                   $is_ori  ? $src1_value | $imm :
                   $is_xori ? $src1_value ^ $imm :
                   $is_addi ? $src1_value + $imm :
                   $is_srli ? $src1_value >> $imm[5:0] :
                   $is_slli ? $src1_value << $imm[5:0] :
                   $is_and  ? $src1_value & $src2_value :
                   $is_or   ? $src1_value | $src2_value :
                   $is_xor  ? $src1_value ^ $src2_value :
                   $is_add  ? $src1_value + $src2_value :
                   $is_sub  ? $src1_value - $src2_value :
                   $is_sll  ? $src1_value << $src2_value[4:0] :
                   $is_srl  ? $src1_value >> $src2_value[4:0] :
                   $is_sltu ? $sltu_result :
                   $is_sltiu ? {31'b0,$src1_value < $imm} :
                   $is_slt ?  (($src1_value[31]==$src2_value[31])? $sltu_result:{31'b0,$src1_value[31]}):       
                   $is_slti ? (($src1_value[31]==$imm[31])? $sltiu_result:{31'b0,$src1_value[31]}):
                   /*$is_sra  ? 
                   $is_srai ?*/
                   $is_load ? $src1_value + $imm :
                   $is_s_instr ? $src1_value + $imm :
                   32'b0;
                   
   `BOGUS_USE($result)
   
  /* $datamem_addr[31:0] = ($is_load || $is_s_instr) ? $result[31:0] : 32'bx; no need datamem will be 
   accessed at the correct address when is_load and is_s_instr is asserted */
   
   
   //Implement Register File Write
   
   $wr_data[31:0] = $wr_en ? $result :
                    $is_load ? $load_data:
                    32'b0;
     
   //Implement Branch logic
   
   $taken_branch = $is_beq  ?  ($src1_value == $src2_value) :
                   $is_bne  ?  ($src1_value != $src2_value) :
                   $is_blt  ?  (($src1_value < $src2_value)  ^ ($src1_value[31] != $src2_value[31])) : //signed nuumbers
                   $is_bge  ?  (($src1_value >= $src2_value) ^ ($src1_value[31] != $src2_value[31])) :
                   $is_bltu ?  ($src1_value < $src2_value)  :
                   $is_bgeu ?  ($src1_value >= $src2_value) :
                   1'b0;
   
   $br_tgt_pc[31:0]  =  $pc + $imm; //calculate target pc address. Also next pc is changed to this if branch is taken
   
   //Unconditional Branch target(jump Logic)
   $jalr_tgt_pc[31:0] = $src1_value + $imm;
   
   // Assert these to end simulation (before Makerchip cycle limit).
   m4+tb()
   *failed = *cyc_cnt > M4_MAX_CYC;
   
   m4+rf(32, 32, $reset, $wr_en, $wr_index[4:0], $wr_data[31:0], $rd1_en, $rd1_index[4:0], $rd1_data, $rd2_en, $rd2_index[4:0], $rd2_data)
   m4+dmem(32, 32, $reset, $result[6:2], $is_s_instr, $src2_value, $is_load, $load_data)
   //m4+dmem(32, 32, $reset, $addr[4:0], $wr_en, $wr_data[31:0], $rd_en, $rd_data)
   m4+cpu_viz()
\SV
   endmodule
