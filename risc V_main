\m4_TLV_version 1d: tl-x.org
\SV
   // This code can be found in: https://github.com/stevehoover/LF-Building-a-RISC-V-CPU-Core/risc-v_shell.tlv
   
   m4_include_lib(['https://raw.githubusercontent.com/stevehoover/warp-v_includes/1d1023ccf8e7b0a8cf8e8fc4f0a823ebb61008e3/risc-v_defs.tlv'])
   m4_include_lib(['https://raw.githubusercontent.com/stevehoover/LF-Building-a-RISC-V-CPU-Core/main/lib/risc-v_shell_lib.tlv'])



   //---------------------------------------------------------------------------------
   // /====================\
   // | Sum 1 to 9 Program |
   // \====================/
   //
   // Program to test RV32I
   // Add 1,2,3,...,9 (in that order).
   //
   // Regs:
   //  x12 (a2): 10
   //  x13 (a3): 1..10
   //  x14 (a4): Sum
   // 
   m4_asm(ADDI, x14, x0, 0)             // Initialize sum register a4 with 0
   m4_asm(ADDI, x12, x0, 1010)          // Store count of 10 in register a2.
   m4_asm(ADDI, x13, x0, 1)             // Initialize loop count register a3 with 0
   // Loop:
   m4_asm(ADD, x14, x13, x14)           // Incremental summation
   m4_asm(ADDI, x13, x13, 1)            // Increment loop count by 1
   m4_asm(BLT, x13, x12, 1111111111000) // If a3 is less than a2, branch to label named <loop>
   // Test result value in x14, and set x31 to reflect pass/fail.
   m4_asm(ADDI, x30, x14, 111111010100) // Subtract expected value of 44 to set x30 to 1 if and only iff the result is 45 (1 + 2 + ... + 9).
   m4_asm(BGE, x0, x0, 0) // Done. Jump to itself (infinite loop). (Up to 20-bit signed immediate plus implicit 0 bit (unlike JALR) provides byte address; last immediate bit should also be 0)
   m4_asm_end()
   m4_define(['M4_MAX_CYC'], 50)
   //---------------------------------------------------------------------------------



\SV
   m4_makerchip_module   // (Expanded in Nav-TLV pane.)
   /* verilator lint_on WIDTH */
\TLV
   
   $reset = *reset;
   
   //PC
   $pc[31:0]      = >>1$next_pc;    
   $next_pc[31:0] = $reset ? 32'b0000 : ($pc + 32'd4);
   
   //IMEM
   `READONLY_MEM($pc, $$instr[31:0]);
   
   //DECODE LOGIC/ INSTR TYPE
   
   $is_r_instr = $instr[6:2] == 5'b01011 || 
                 $instr[6:2] ==? 5'b011x0 || 
                 $instr[6:2] ==? 5'b10100 ;
                 
   $is_i_instr = $instr[6:2] ==? 5'b0000x || 
                 $instr[6:2] ==? 5'b001x0 ||
                 $instr[6:2] == 5'b11001 ;
                 
   $is_s_instr = $instr[6:2] ==? 5'b0100x;
   $is_b_instr = $instr[6:2] == 5'b11000;
   $is_u_instr = $instr[6:2] ==? 5'b0x101;
   $is_j_instr = $instr[6:2] ==? 5'b11011;
     
   //EXTRACT NON-IMMEDIATE TYPE FIELDS FROM INSTRUCTIONS
   
   $funct7[6:0] = $instr[31:25];
   $funct3[2:0] = $instr[14:12];
   $rs1[4:0]    = $instr[19:15];
   $rs2[4:0]    = $instr[24:20];
   $rd[4:0]     = $instr[11:7];
   $opcode[6:0] = $instr[6:0];
   
   `BOGUS_USE($rd $rs1 $funct7 $funct3 $imm_valid $opcode $rs2);
   
   //CHECKNG VALIDITY OF FIELDS
   
   $funct7_valid  =  $is_r_instr;
   $funct3_valid  =  $is_r_instr || $is_i_instr || $is_s_instr || $is_b_instr;
   $rd_valid      =  $is_r_instr || $is_u_instr || $is_i_instr || $is_j_instr;
   $rs1_valid     =  $is_r_instr || $is_i_instr || $is_b_instr || $is_s_instr;
   $rs2_valid     =  $is_r_instr || $is_s_instr || $is_b_instr;
   $imm_valid     =  $is_i_instr || $is_s_instr || $is_b_instr || $is_u_instr|| $is_j_instr;
   
   `BOGUS_USE($rd_valid $rs1_valid $imm_valid $rs2_valid $funct7_valid $funct3_valid);
   
   //EXTRACTING IMMEDIATE VALUES
   
   $imm[31:0] = $is_i_instr ? {{21{$instr[31]}}, $instr[30:20]} :                                              //I type
                $is_s_instr ? {{21{$instr[31]}}, $instr[30:25], $instr[11:7]} :                                //S type
                $is_b_instr ? {{20{$instr[31]}}, $instr[7], $instr[30:25], $instr[11:8],1'b0} :                //B type
                $is_u_instr ? {$instr[31:12],  12'b0} :                                        //U type
                $is_j_instr ? {{12{$instr[20]}}, $instr[19:12], $instr[20], $instr[30:21], 1'b0} :             //J type
                32'b0;                                                                                         // default is 0
   
   `BOGUS_USE($imm);
   
   //Determine functionality of instruction from OPCODE+func7[5]+func3 fields
   //dec_bits is concatenation of the relevant fields 
   
   $dec_bits[10:0] = {$funct7[5],$funct3,$opcode};
   
   //Instructions that dont use func7[5]
   $is_beq  =  $dec_bits ==? 11'bx_000_1100011;
   $is_bne  =  $dec_bits ==? 11'bx_001_1100011;
   $is_blt  =  $dec_bits ==? 11'bx_100_1100011;
   $is_bge  =  $dec_bits ==? 11'bx_101_1100011;
   $is_bltu =  $dec_bits ==? 11'bx_110_1100011;
   $is_bgeu =  $dec_bits ==? 11'bx_111_1100011;
   $is_addi =  $dec_bits ==? 11'bx_000_0010011;
      
   //Instructions that use func7[5]
   
   $is_add =  $dec_bits == 11'b0_000_0110011;
   
   `BOGUS_USE($is_add $is_beq $is_bne $is_blt $is_bge $is_bltu $is_bgeu $is_addi);
   
   
   //Implement Register File
   
   $rd1_index[4:0]   = $rs1; //read port1 address 
   $rd2_index[4:0]   = $rs2; //read port2 address 
   $rd1_en           = $rs1_valid;   //read port 1 enable
   $rd2_en           = $rs2_valid;   //read port 2 enable
   $src1_value[31:0] = $rd1_data; //read port 1 data
   $src2_value[31:0] = $rd2_data; //read port 2 data
   $wr_en            = $rd_valid; //write port enable
   $wr_index[4:0]    = $rd;//write port address
   
   
   `BOGUS_USE($src1_value $src2_value)
   
   //Implement ADDI and ADD
   
   $result[31:0] = $is_add ? $src1_value + $src2_value:
                   $is_addi ? $imm + $src2_value :
                   32'b0;  
                   
   `BOGUS_USE($result)
   
   //Implement Register File Write
   
   $wr_data[31:0] = $wr_en ? $result : 32'b0;
   
   // Assert these to end simulation (before Makerchip cycle limit).
   *passed = 1'b0;
   *failed = *cyc_cnt > M4_MAX_CYC;
   
   m4+rf(32, 32, $reset, $wr_en, $wr_index[4:0], $wr_data[31:0], $rd1_en, $rd1_index[4:0], $rd1_data, $rd2_en, $rd2_index[4:0], $rd2_data)
   //m4+dmem(32, 32, $reset, $addr[4:0], $wr_en, $wr_data[31:0], $rd_en, $rd_data)
   m4+cpu_viz()
\SV
   endmodule
